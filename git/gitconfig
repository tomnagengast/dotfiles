[alias]
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Show the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Clone a repository including all submodules
	c = clone --recursive

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches, or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

[attributes]
	# Specify the attributes file
	attributesfile = ~/.gitattributes

[core]
	# Handle line endings automatically
	autocrlf = input
	# Global gitignore file
	excludesfile = /Users/tomnagengast/.gitignore_global
	# Use delta as the pager
	pager = delta

[color]
	# Use colors in Git commands
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[commit]
	# Commit message template
	template = ~/.stCommitMsg

[diff]
	# Detect copies as well as renames
	renames = copies
	colorMoved = default

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	conflictstyle = diff3

[pull]
	# Do not rebase by default when pulling
	rebase = false

[push]
	# Push the current branch by default
	default = current
	# Push relevant annotated tags when pushing branches out
	followTags = true
	# Automatically set up remote tracking branches
	autoSetupRemote = true

[filter "lfs"]
	# Git LFS settings
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[gpg]
	# GPG program and format
	program = gpg
	format = ssh

[tag]
	# Do not force sign annotated tags
	forceSignAnnotated = false

[user]
	# User information
	name = tomnagengast
	email = tnagengast@gmail.com
	signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB3FOfHxMK6gmUS+IAjVKt8ZuAO4nrZbi5HgXJfF0BTZ

[delta]
	# Delta settings
	# side-by-side = true
	navigate = true
	line-numbers = true
	keep-plus-minus-markers = true

[interactive]
	# Use delta for interactive diffs
	diffFilter = delta --color-only

[init]
	# Template directory for new repositories
	templateDir = /Users/tomnagengast/.git-template

[gpg "ssh"]
	# GPG program for SSH
	program = /Applications/1Password.app/Contents/MacOS/op-ssh-sign
